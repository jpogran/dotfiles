# $PROFILE.CurrentUserCurrentHost
#Requires -Version 7.2

using namespace System
using namespace System.Management.Automation

# Set-StrictMode -Version Latest
# stop even on non-critical errors
$global:ErrorActionPreference = "Stop"
#$global:PSDefaultParameterValues["*:ErrorAction"] = $ErrorActionPreference
# throw error when native command returns non-zero exit code
$global:PSNativeCommandUseErrorActionPreference = $true
# show Information log stream
$global:InformationPreference = "Continue"

# Set environment variables
$env:EDITOR = 'code --wait'
# set env:LANG, which makes `git diff` and other originally Linux commands print stuff with correct encoding
$env:LANG = "UTF-8"
$env:LESSCHARSET = 'UTF-8'
$OutputEncoding = [Console]::OutputEncoding = [Console]::InputEncoding = [System.Text.UTF8Encoding]::new()

$env:HOMEDRIVE = $env:SystemDrive
if ($env:USERPROFILE) {
  $env:HOMEPATH = $env:USERPROFILE | Split-Path -NoQualifier
}

# The XDG standard says use the variable and tells us how to calculate a fallback
# $DataHome = [Environment]::GetFolderPath("LocalApplicationData") # $ENV:XDG_DATA_HOME    .local/share  # scripts and modules
# $ConfigHome = [Environment]::GetFolderPath("ApplicationData")    # $ENV:XDG_CONFIG_HOME  .config       # profile and settings
$DataHome = if ($ENV:XDG_CONFIG_HOME -and $ENV:XDG_DATA_HOME) {
  $ENV:XDG_DATA_HOME
}
else {
  [IO.Path]::Combine($HOME, ".local", "share")
}

# Import utility modules
if (Test-Path "$env:USERPROFILE\.local\share\powershell\Scripts\utility.ps1") {
  . "$env:USERPROFILE\.local\share\powershell\Scripts\utility.ps1"
}
else {
  . "$($DataHome)/powershell/Scripts/utility.ps1"
}

# Set up PSReadLine configuration
if (Test-Path "$env:USERPROFILE\.local\share\powershell\Scripts\psreadline.ps1") {
  . "$env:USERPROFILE\.local\share\powershell\Scripts\psreadline.ps1"
}
else {
  . "$($DataHome)/powershell/Scripts/psreadline.ps1"
}

Import-Module posh-git

$alias:count = 'Measure-Object'
$alias:ll = 'Get-ChildItem'
$alias:mc = 'Measure-Command'
$alias:time = 'Measure-Command'
$alias:bat = 'Get-Content'

$alias:w = 'Where-Object'
$alias:f = 'ForEach-Object'
$alias:s = 'Select-Object'
$alias:m = 'Measure-Object'
$alias:n = 'New-Object'
$alias:new = 'New-Object'
$alias:os = 'Out-String'
$alias:string = 'Out-String'

$PSDefaultParameterValues = @{
  'ConvertTo-Csv:NoTypeInformation'   = $true
  'Export-Csv:NoTypeInformation'      = $true
  'Install-Module:AllowClobber'       = $true
  'Install-Module:Force'              = $true
  'Install-Module:SkipPublisherCheck' = $true
  'Install-Module:Scope'              = 'CurrentUser'
  'Install-Package:Repository'        = 'PSGallery'
  'Out-Default:OutVariable'           = 'LastResult'
  'Out-File:Encoding'                 = 'utf8'
}

# Apply theme settings to PSReadLine if available
if (Get-Module -ListAvailable -Name PSReadLine) {
  Set-PSReadLineOption -Colors @{
    Command          = "Blue"
    Parameter        = "White"
    InlinePrediction = 'DarkGray'
    Default          = "#C9D1D9"
  }
}

$PSStyle.FileInfo.Directory = "`e[96;1m"

$env:PATH = @(
  "/opt/homebrew/bin",
  "/opt/homebrew/sbin",
  "$HOME/.local/share/mise/shims",
  $env:PATH
) -join [IO.Path]::PathSeparator

Invoke-Expression $(/opt/homebrew/bin/brew shellenv | Out-String)

Invoke-Expression $(gh completion -s powershell | Out-String)

Invoke-Expression (starship init powershell)
